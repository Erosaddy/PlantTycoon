<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.planttycoon.mapper.MemberMapper">

	<resultMap type="kr.co.planttycoon.domain.MemberDTO" id="memberMap">
		<id property="memberId" column="memberId"/>
		<result property="memberId" column="memberId"/>
		<result property="memberPw" column="memberPw"/>
		<result property="nickname" column="nickname"/>
		<result property="plant" column="plant"/>
		<result property="enabled" column="enabled"/>
		<result property="lastLogin" column="lastLogin"/>
		<result property="regDate" column="regDate"/>
		<collection property="authorityList" resultMap="authMap">
		</collection>
	</resultMap>

	<resultMap type="kr.co.planttycoon.domain.AuthorityDTO" id="authMap">
		<result property="memberId" column="memberId"/>
		<result property="authority" column="authority"/>
	</resultMap>
	
	<select id="read" resultMap="memberMap">
		SELECT	mem.memberId, memberPw, nickname, plant, enabled, lastLogin, regDate, authority
		FROM	member mem
		LEFT OUTER JOIN memberAuthority auth 
		ON mem.memberId = auth.memberId
		WHERE	mem.memberId = #{memberId}
	</select>
	
	<insert id="createMember">
		INSERT INTO member(memberId, memberPw, nickname, plant)
		VALUES(#{memberId}, #{memberPw}, #{nickname}, #{plant})
	</insert>
	
	<insert id="createMemberAuthority">
		INSERT INTO memberAuthority(memberAuthorityId, memberId)
		VALUES(memberAuthority_seq.NEXTVAL, #{memberId})
	</insert>
	
	<!-- 이메일 중복 체크 -->
	<select id="idCheck" parameterType="String" resultType="int">
		SELECT	COUNT(memberId)
		FROM	member
		WHERE	memberId = #{memberId}
	</select>
	
	<update id="modifyMember">
		UPDATE	member
		SET		nickname = #{nickname}, plant = #{plant}
		WHERE	memberId = #{memberId}
	</update>
	
	<update id="modifyEnabled">
		UPDATE	member
		SET		enabled = #{enabled}
		WHERE	memberId = #{memberId}
	</update>
	
	<update id="updatePassword">
		UPDATE	member
		SET		memberPw = #{memberPw}
		WHERE	memberId = #{memberId}
	</update>
	
    <select id="memberList" resultMap="memberMap">
        <![CDATA[
        SELECT * FROM (
            SELECT rownum as rn, mem.memberId, 
                   mem.memberPw, 
                   mem.nickname, 
                   mem.enabled,
                   mem.lastLogin,
                   mem.regDate,
                   (SELECT authority 
                    FROM (SELECT authority, ROW_NUMBER() OVER (ORDER BY CASE authority WHEN 'ROLE_ADMIN' THEN 1 WHEN 'ROLE_MEMBER' THEN 2 ELSE 3 END) as rnk
                          FROM memberAuthority auth 
                          WHERE auth.memberId = mem.memberId)
                    WHERE rnk = 1) as authority
            FROM (
                SELECT mem.memberId, 
                       mem.memberPw, 
                       mem.nickname, 
                       mem.enabled,
                       mem.lastLogin,
                       mem.regDate
                FROM member mem
        ]]>
        
        <where>
	        <include refid="criteria"/>
        </where>
        
        <![CDATA[
                ORDER BY mem.memberId DESC
            ) mem
            WHERE rownum <= #{pageNum} * #{amount}
        )
        WHERE rn > (#{pageNum} - 1) * #{amount}
        ]]>
    </select>
    
    <select id="getTotalCnt" resultType="int">
		SELECT	count(*)
		FROM	member
		<where>
			<include refid="criteria"></include>
		</where>	
	</select>
	
	
	<sql id="criteria">
        <choose>
            <when test="type == 'N'.toString()">
                nickname LIKE '%' || #{keyword} || '%'
            </when>
            <when test="type == 'E'.toString()">
                memberId LIKE '%' || #{keyword} || '%'
            </when>
        </choose>
	</sql>
	
</mapper>